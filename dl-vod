#!/usr/bin/python3

import subprocess
import json
import argparse
import sys

# define arguments
parser = argparse.ArgumentParser(description='Download twitch vod along with its thumbnail and metadata.')
parser.add_argument('id', metavar='ID', type=int, help='the vod id')
parser.add_argument('-v', '--video-path', dest='video_path', metavar='PATH', nargs='?', default='./videos', help='specify a different directory for video to be downoaded')
parser.add_argument('-t', '--thumb-path', dest='thumbnail_path', metavar='PATH', nargs='?', default='./thumbnails', help='specify a different directory for thumbnail to be downoaded')
parser.add_argument('-m', '--meta-file', dest='meta_path', metavar='FILE', nargs='?', default='./metadata.json', help='specify a different file for metadata to be read & saved')
parser.add_argument('--no-vid', dest='no_vid', action='store_true', help='don\'t download video')
parser.add_argument('--no-thumb', dest='no_thumb', action='store_true', help='don\'t download thumbnail')
parser.add_argument('--no-meta', dest='no_meta', action='store_true', help='don\'t download metadata')
args = parser.parse_args()

# convert id to string (for json)
args.id = str(args.id)

# ensure file paths are consistent
if args.video_path[-1] != '/':
  args.video_path += '/'
if args.thumbnail_path[-1] != '/':
  args.thumbnail_path += '/'

# read json metadata file + 
json_file = open(args.meta_path)
json_data = json.load(json_file)
json_file.close()

# get vod metadata 
video_metadata = json.loads(subprocess.run(['twitch', 'api', 'get', 'videos', '-q', f'id={args.id}'], stdout=subprocess.PIPE).stdout.decode('utf-8'))
if video_metadata['data'] == []:
  sys.exit(f'dl-vod: error: 404 not found: video with id \'{args.id}\' not found')
json_data[args.id] = video_metadata['data'][0]

# update metadata json file
if not args.no_meta:
  with open(args.meta_path, 'w', encoding='utf-8') as f:
    json.dump(json_data, f, ensure_ascii=False, indent=2)

# download thumbnail
if not args.no_thumb:
  thumbnail_url = json_data[args.id]['thumbnail_url'].replace('%{width}', '1280').replace('%{height}', '720')
  file_type = thumbnail_url.split('.')[-1]
  subprocess.run(['curl', thumbnail_url, '--output', f'{args.thumbnail_path}{args.id}.{file_type}'])

# download video
if not args.no_vid: 
  subprocess.run(['youtube-dl', '-o', f'{args.video_path}{args.id}.%(ext)s', f'https://www.twitch.tv/videos/{args.id}'])
